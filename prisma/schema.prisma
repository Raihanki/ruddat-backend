// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  username      String      @unique
  password      String
  profilePic    String
  country       String
  gender        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  SubRuddat     SubRuddat[]
  vote          Vote[]
  comment       Comment[]
  post          Post[]
  postWisdom    Int         @default(0)
  awarderWisdom Int         @default(0)
  commentWisdom Int         @default(0)
  awardeeWisdom Int         @default(0)

  @@map("users")
}

model Post {
  id          String    @id @default(uuid())
  title       String
  body        String
  url         String
  image       String
  video       String
  isPolling   Boolean   @default(false)
  pollEndDate Boolean
  isCommunity Boolean   @default(false)
  isArchive   Boolean   @default(false)
  subRuddatId Int
  subRuddat   SubRuddat @relation(fields: [subRuddatId], references: [id])
  tags        PostTag[]
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  vote        Vote[]
  comment     Comment[]

  @@map("posts")
}

model SubRuddat {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  email       String
  moderatorId String
  moderator   User     @relation(fields: [moderatorId], references: [id])
  avatar      String
  description String
  welcomeMsg  String
  topicId     Int
  topics      Topic   @relation(fields: [topicId], references: [id])
  isPublic    Boolean  @default(true)
  isNsfw      Boolean  @default(false)
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  post        Post[]

  @@map("subRuddats")
}

model Topic {
  id        Int         @id @default(autoincrement())
  name      String
  image     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  subRuddat SubRuddat[]

  @@map("topics")
}

model Tags {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      PostTag[]

  @@map("tags")
}

model PostTag {
  id     Int    @id @default(autoincrement())
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  tagId  Int
  tag    Tags   @relation(fields: [tagId], references: [id])

  @@map("postTags")
}

model Vote {
  id       Int     @id @default(autoincrement())
  postId   String
  post     Post    @relation(fields: [postId], references: [id])
  userId   String
  user     User    @relation(fields: [userId], references: [id])
  vote     Boolean
  upVote   Int
  downVote Int

  @@map("votes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  parentId  Int

  @@map("comments")
}
